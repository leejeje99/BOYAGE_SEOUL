Django 서비스 AWS로 배포하기 - [4] nginx 연결하기
웹/Django 2020. 3. 15. 19:22
Django 서비스 AWS로 배포하기 - [1] 프로젝트 준비와 AWS 서버 대여

Django 서비스 AWS로 배포하기 - [2] github과 프로젝트 업로드

Django 서비스 AWS로 배포하기 - [3] uWSGI 연결하기

 

사용자의 브라우저를 통한 요청은 웹 서버가 받는 것이 일반적이지 uwsgi가 받아 처리하는 것은 적절하지 않습니다. 이번 포스트에는 저번 포스트를 통해 Django와 연결해둔 uwsgi 서버와 nginx를 연결해 1차 배포를 완료해 보겠습니다.

nginx 와 uwsgi를 연결하기
nginx는 대표적인 웹 서버 어플리케이션입니다. 웹 서버는 사용자의 요청(request)을 받아 적절한 반응(response)을 해주는 역할을 하는데, 우리의 Django 프로젝트와 연결한다면 우리가 구축한 이 프로젝트의 방식대로 nginx가 사용자에게 반응해줄 수 있을겁니다.

 

먼저 서버 컴퓨터에서 nginx를 설치해 줍니다.

$ sudo apt-get install nginx
 

nginx도 배포에 사용되는 어플리케이션이고, 우리는 배포를 위한 계정인 deploy를 만들었습니다. 따라서, nginx의 설정 파일에서 nginx를 사용하는 유저가 deploy임을 알려줍니다. 다음 명령어를 통해 설정 파일을 연 뒤,

$ sudo vi /etc/nginx/nginx.conf
 

키보드에서 i를 눌러 수정 모드로 바꾼 뒤 첫 줄에 www-data로 되어 있는 user를 deploy로 아래와 같이 수정해주고,

user deploy;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
        # multi_accept on;
}

http {

        ##
        # Basic Settings
        ##
.... 중략
esc를 눌러 수정 모드를 해제한 뒤 :wq 친 뒤 엔터를 하면 저장이 되고 파일을 나갑니다.

 

다시 로컬 컴퓨터로 돌아와서 nginx 설정 파일을 만들어 줄겁니다. 로컬 컴퓨터에서 프로젝트 폴더 내에 .config 폴더 안에 nginx 폴더를 만들고 mysite.conf 파일을 만들어 줍니다. 이런 구조가 되겠죠?

 

.config

├── nginx

│   └── mysite.conf

└── uwsgi

│   └── mysite.ini

 

mysite.conf 파일에 다음과 같이 입력합니다.

 

.config/mysite.conf

server {
    listen 80;
    server_name *.compute.amazonaws.com;
    charset utf-8;
    client_max_body_size 128M;

    location / {
        uwsgi_pass  unix:///tmp/mysite.sock;
        include     uwsgi_params;
    }
}